#!/bin/sh
#
# Author: Pooya Moradi
# Date : 2022/04/11 | 1401-01-22
# License: MIT
#
# Description: A simple script to fetch Iranian and international calendar
#              events
#
# Dependencies: jq curl date jdate idate awk grep cut tr

# TODO

show_help() {
    cat << EOF
imroo: show Iranian/international calendar events for a date

Usage: imroo [OPTIONS] [DATE]
Arguments:
    [DATE]    Get events at given DATE (in Y/M/D format, Persian calendar)
              If empty, it is set to today
Options:
    -s        Sync database by downloading the json file from internet
    -d NUM    Number of days into future starting from DATE (including)
    -j        Use JSON as output format
    -V        Print script version
    -h        Display the help message

Examples:
    # sync before first use
    imroo -s
    # get events for current day
    imroo
    # get events for today, tomorrow, and the day after tomorrow
    imroo -d3
    # get events starting from 1404-11-10, and 5 days after it, in json
    imroo -j -d 6 "1404/11/10"
EOF
}

log() {
    _mode=""
    case "$1" in
        "error")
            _mode="error"
            ;;
        "warn")
            _mode="warn"
            ;;
        "info")
            _mode="info"
            ;;
        "debug")
            _mode="debug"
            ;;
    esac
    printf >&2 "[%-5s] %s\n" "$_mode" "$2"
}

check_deps() {
    _app=""
    _err=0
    for _app in "$@"; do
        if ! command -v "$_app" > /dev/null 2>&1; then
            log error "dependency $_app not found"
            _err=1
        fi
    done
    [ $_err -eq 1 ] && exit "$_err"
}

fetch() {
    _url="$1"
    _file="$2"
    if ! curl -# --fail --location "$_url" --output "$_file"; then
        return 1
    fi
}

sync() {
    log info "Syncing database to $data_dir"
    mkdir --parents "$data_dir"

    if ! fetch "$db_link" "$events"; then
        log error "Problem in downloading $db_link"
        return 1
    fi

    _db_files=$(printf '%s\n' "$data_dir/"*)
    log info "Downloaded files: $_db_files"
    log info "Done syncing"
}

get_date_in_cal() {
    case "$1" in
        "Persian Calendar")
            jdate '+%Y %m %d' --jalali \
                "$(date '+%Y/%m/%d' -d "$start_date + $offset days")"
            ;;
        "Hijri Calendar")
            idate --gregorian \
                "$(date '+%Y%m%d' -d "$start_date + $offset days")" \
                | grep Output \
                | grep -o '[0-9]\+/[[:space:]]*[0-9]\+/[0-9]\+' \
                | awk -F/ '{$2 = $2 + 0; print $3, $2, $1}'
            ;;
        "Gregorian Calendar")
            date '+%Y %m %d' -d "$start_date + $offset days"
            ;;
    esac
}

# deprecated
get_event() {
    _cal="$1"
    read -r year month day << END
$(get_date_in_cal "$_cal")
END

    if ! jq --raw-output \
        --arg cal "$_cal" \
        --argjson m "$month" --argjson d "$day" \
        '.[$cal] | map (select(.month == $m and .day == $d and
                              (.type == "Iran" or
                               .type == "International" or
                               .type == "AncientIran"))) []
                 as $m
                 | (if $m.holiday
                    then ($m.title + " (تعطیل)")
                    else $m.title end)' \
        "$events"; then
        log error "Filtering $events failed"
        exit 1
    fi
}

get_events() {
    year=""
    month=""
    day=""
    ch_soori=""
    # json array
    _keys="["
    for _cal in $calendars; do
        _cal="$_cal Calendar"
        if ! _result=$(get_date_in_cal "$_cal"); then
            log error "Failed to get month/day for $_cal. Skipping..."
            continue
        fi
        read -r year month day << EOF
        $_result
EOF

        # manually form the json element
        _key_json=$(
            cat << EOF
{"calendar": "$_cal", "year": $year , "month": $month, "day": $day}
EOF
        )
        _keys="$_keys$_key_json,"

        # special case for Chaharshanbe Soori
        if [ "$month" -eq 12 ] && [ "$day" -ge 22 ] \
            && [ "$_cal" = "Persian Calendar" ]; then
            if ! ch_soori=$(jcal "$year" 12 \
                | awk 'NR > 2 && NF >= 5 {x = $5} END {print x}'); then
                log warn "Failed to get Chaharshanbe Soori day from jcal"
            fi
            ch_soori=$((ch_soori - 1))
            if ! [ "$day" -eq "$ch_soori" ]; then
                ch_soori=""
            fi
        fi
    done
    # remove last comma
    _keys=$(printf '%s' "$_keys" | sed 's/,$//')
    _keys="$_keys]"

    # for -j mode, prepare a ISO (implying Gregorian) date
    iso_date=""
    if [ $out_json -eq 1 ]; then
        iso_date=$(date '+%Y-%m-%d' -d "$start_date + $offset days")
    fi

    if ! jq --raw-output \
        --argjson keys "$_keys" \
        --arg country "$country" \
        --argjson out_json "$out_json" \
        --arg iso_date "$iso_date" \
        --arg ch_soori "$ch_soori" \
        'def get_event(cal; m; d):
             .[cal] | map (select(.month == m and .day == d and
                                 (.type == $country or
                                  .type == "International" or
                                  .type == "AncientIran"))) []
              as $event
              | if ($out_json == 1)
                then
                  $event + {"calendar" : cal} + {"iso_date": $iso_date}
                else
                  if $event.holiday
                  then ($event.title + " (تعطیل)")
                  else $event.title end
                end;

         # Sakamoto algorithm for weekday calculation
         # https://www.geeksforgeeks.org/dsa/tomohiko-sakamotos-algorithm-finding-day-week/
         # https://www.reddit.com/r/programming/comments/4o0bhj/comment/d49a2m3/
         # output: saturday->friday is mapped to  0->6
         def day_of_week(y; m; d):
             [ 0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4 ] as $t |
             (if m < 3 then (y - 1) else y end) as $y2 |
             ($y2 + (($y2 / 4) | floor) - (($y2 / 100) | floor)
             + (($y2 / 400) | floor) + $t[m - 1] + d + 1) % 7
             ;

         def is_leap(y):
             y % 4 == 0 and ((y % 100 != 0) or (y % 400 == 0));

         # Reference: https://rosettacode.org/wiki/Last_Friday_of_each_month#jq
         def findLastWeekday(y; m; weekday):
           def days:
             if m == 2 then (if is_leap(y) then 29 else 28 end)
             else [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][m-1]
             end;
           days
           | until( day_of_week(y; m; .) == weekday ; .-1);

         def findThirdWeekday(y; m; weekday):
            def days:
                if m == 2 then (if is_leap(y) then 29 else 28 end)
                else [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][m-1]
                end;
            {day: 1, counter: 0} |
              until(.counter == 3 or .day > days;
                if (day_of_week(y; m; .day) == weekday) then
                  .counter += 1 |
                  if .counter < 3 then .day += 1 end
                else
                  .day += 1
                end
              ) |
              if .counter == 3 then .day else null end;

         # Cariño nd algorithm
         # https://vixra.org/pdf/1801.0408v1.pdf
         def nth_day(y; m; d):
            (12 * y + m - 3) as $a |
            ($a - 10) as $b |
            31 * m - 31 + d - (((3 * m) / 7) | floor)
            - 2 * (((m + 7) / 10) | floor) + (($a / 48) | floor)
            - (((y - 1) / 4) | floor) - (($a / 1200) | floor)
            + (($b / 1200) | floor) + (($a / 4800) | floor)
            - (($b / 4800) | floor)
            ;

         def get_irregular_event(cal; y; m; d):
             .["Irregular Recurring"]
                    | map (select((.calendar as $x | cal | contains($x)) and
                                 (.type == $country or
                                  .type == "International" or
                                  .type == "AncientIran")))
                    | map(select(
                         # world leprosy day
                         (.calendar =="Gregorian" and .month == m and
                          .weekday == 1 and (d == findLastWeekday(y; 1; 1)))
                         or
                         # black friday
                         (.calendar =="Gregorian" and .month == m and
                          .weekday == 6 and (d == findLastWeekday(y; 11; 6)))
                         or
                         # philosopher day
                         (.calendar =="Gregorian" and .month == m and
                          .weekday == 5 and (d == findThirdWeekday(y; 11; 5)))
                         or
                         # programmer day
                         (.calendar =="Gregorian" and .nth == 256 and
                         (m == 9) and
                           (if is_leap(y) then (d == 12) else (d == 13) end))
                         or
                         # chaharshanbe soori day
                         (.calendar =="Persian" and
                         ($ch_soori | length > 0) and .month == 12)
                         ))
              [] as $event
              | if ($out_json == 1)
                then
                  $event + {"calendar" : cal} + {"iso_date": $iso_date}
                else
                  if $event.holiday
                  then ($event.title + " (تعطیل)")
                  else $event.title end
                end;

         # get regular events
         . as $events
         | $keys[] as $key
         | $events
         | get_event($key.calendar; $key.month; $key.day)
           ,get_irregular_event($key.calendar; $key.year; $key.month; $key.day)
         ' \
        "$events"; then
        log error "Filtering $events failed"
        exit 1
    fi
}

# global variables
version=0.10
data_dir="${XDG_DATA_HOME:-$HOME/.local/share}/imroo"
events="$data_dir/events.json"
db_link="https://github.com/persian-calendar/persian-calendar/raw/refs/heads/main/PersianCalendar/data/events.json"
days=1
offset=0
out_json=0
start_date=""
# desired calendars, mind the spaces and capitalizations
calendars="Persian Hijri Gregorian"
country="Iran"

while getopts sVhjd: opt; do
    case $opt in
        h)
            show_help
            exit
            ;;
        V)
            printf "%s\n" "$version"
            exit
            ;;
        s)
            sync
            exit "$?"
            ;;
        d)
            days="$OPTARG"
            ;;
        j)
            out_json=1
            ;;
        *)
            log error "Bad usage! Check help (-h)"
            exit 2
            ;;

    esac
done
shift "$((OPTIND - 1))"

if [ -n "$1" ]; then
    date_arg="$1"
    date_arg=$(printf "%s" "$date_arg" | tr '-' '/')
    start_date="$(jdate --gregorian="$date_arg")"
fi

check_deps jq curl jdate idate date

# check if db json file exists
if [ ! -f "$events" ]; then
    log error "Database not found. Sync first (-s)"
    exit 1
fi

# handle output json format
if [ $out_json -eq 1 ]; then
    e_json_stream=""
    while [ "$days" -gt 0 ]; do
        e_json_stream="$e_json_stream$(get_events)"
        days=$((days - 1))
        offset=$((offset + 1))
    done
    printf "%s" "$e_json_stream" | jq --slurp
    exit
fi

# handle output text format
if [ "$days" -eq 1 ]; then
    get_events
    exit
fi

while [ "$days" -gt 0 ]; do
    day_str=$(jdate '+%E' --jalali \
        "$(date '+%Y/%m/%d' -d "$start_date + $offset days")" \
        | awk -F '،' '{print $1}')
    printf "«%s»\n" "$day_str"

    get_events

    days=$((days - 1))
    offset=$((offset + 1))
    printf "————————————————\n"
done

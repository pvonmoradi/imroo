#!/bin/sh
#
# Author: Pooya Moradi
# Date : 2022/04/11 | 1401-01-22
# License: MIT
#
# Description: A simple script to fetch Iranian and international calendar
#              events
#
# Dependencies: jq curl date jdate idate awk grep cut

# TODO

show_help() {
    cat << EOF
imroo: shows Iranian/international calendar events for current day or
            future days

Usage: imroo [OPTIONS]
Options:
    -s      Sync database by downloading the json file from internet
    -d      Number of days into future from today (including today)
    -V      Print script version
    -h      Display the help message

Examples:
    # sync before first use
    imroo -s
    # get events for current day
    imroo
    # get events for today, tomorrow, and the day after tomorrow
    imroo -d3
EOF
}

log() {
    _mode=""
    case "$1" in
        "error")
            _mode="error"
            ;;
        "warn")
            _mode="warn"
            ;;
        "info")
            _mode="info"
            ;;
        "debug")
            _mode="debug"
            ;;
    esac
    printf >&2 "[%-5s] %s\n" "$_mode" "$2"
}

check_deps() {
    _app=""
    _err=0
    for _app in "$@"; do
        if ! command -v "$_app" > /dev/null 2>&1; then
            log error "dependency $_app not found"
            _err=1
        fi
    done
    [ $_err -eq 1 ] && exit "$_err"
}

fetch() {
    _url="$1"
    _file="$2"
    if ! curl -# --fail --location "$_url" --output "$_file"; then
        return 1
    fi
}

sync() {
    log info "Syncing database to $data_dir"
    mkdir --parents "$data_dir"

    if ! fetch "$db_link" "$events"; then
        log error "Problem in downloading $db_link"
        return 1
    fi

    _db_files=$(printf '%s\n' "$data_dir/"*)
    log info "Downloaded files: $_db_files"
    log info "Done syncing"
}

get_month_day() {
    case "$1" in
        "Persian Calendar")
            jdate '+%m %d' --jalali "$(date '+%Y/%m/%d' -d "+$offset days")"
            ;;
        "Hijri Calendar")
            idate --gregorian "$(date '+%Y%m%d' -d "+$offset days")" \
                | grep Output \
                | grep -o '[0-9]\+/[[:space:]]*[0-9]\+/[0-9]\+' \
                | awk -F/ '{print $2, $1}'
            ;;
        "Gregorian Calendar")
            date '+%m %d' -d "+$offset days"
            ;;
    esac
}

get_event() {
    _cal="$1"
    read -r month day << END
$(get_month_day "$_cal")
END

    if ! jq --raw-output \
        --arg cal "$_cal" \
        --argjson m "$month" --argjson d "$day" \
        '.[$cal] | map (select(.month == $m and .day == $d and
                              (.type == "Iran" or
                               .type == "International" or
                               .type == "AncientIran"))) []
                 as $m
                 | (if $m.holiday
                    then ($m.title + " (تعطیل)")
                    else $m.title end)' \
        "$events"; then
        log error "Filtering $events failed"
        exit 1
    fi
}

# global variables
version=0.5
data_dir="${XDG_DATA_HOME:-$HOME/.local/share}/imroo"
events="$data_dir/events.json"
db_link="https://github.com/persian-calendar/persian-calendar/raw/refs/heads/main/PersianCalendar/data/events.json"
days=1
offset=0

while getopts sVhd: opt; do
    case $opt in
        h)
            show_help
            exit
            ;;
        s)
            sync
            exit "$?"
            ;;
        d)
            days="$OPTARG"
            ;;
        V)
            printf "%s\n" "$version"
            exit
            ;;
        *)
            log error "Bad usage! Check help (-h)"
            exit 2
            ;;

    esac
done
shift "$((OPTIND - 1))"
if [ -n "$1" ]; then
    log error "Bad usage! imroo takes no arguments. Check help (-h)"
    exit 2
fi

check_deps jq curl jdate idate date

# check if db json file exists
if [ ! -f "$events" ]; then
    log error "Database not found. Sync first (-s)"
    exit 1
fi

if [ "$days" -eq 1 ]; then
    get_event "Persian Calendar"
    get_event "Hijri Calendar"
    get_event "Gregorian Calendar"
    exit
fi

while [ "$days" -gt 0 ]; do
    week_day=$(jdate '+%G' --jalali "$(date '+%Y/%m/%d' -d "+$offset days")")
    month_day=$(jdate '+%W' --jalali "$(date '+%Y/%m/%d' -d "+$offset days")" | cut -d/ -f3)
    printf "«%s, %s»\n" "$week_day" "$month_day"

    get_event "Persian Calendar"
    get_event "Hijri Calendar"
    get_event "Gregorian Calendar"

    days=$((days - 1))
    offset=$((offset + 1))
    printf "——————————————\n"
done
